[General]
network = Computer
sim-time-limit = 10000s
warmup-period = 200s
**.vector-recording = true
seed-set = ${repetition}
num-rngs = 3
**.processGenerator.rng-0 = 0
**.processGenerator.rng-1 = 1
**.processGenerator.rng-2 = 2
repeat = 1

[Default]
**.processGenerator.IOPercentageCPUbound = 0.2
**.processGenerator.IOPercentageIObound = 0.8
**.processGenerator.meanGenerationTime = 0.1s
**.processGenerator.meanProcessDuration = 0.3s

[MainSimulation]
extends = Default
repeat = 3
**.processGenerator.meanGenerationTime = ${20ms,50ms}
**.processGenerator.meanProcessDuration = ${40ms,100ms,200ms}
**.processGenerator.pCpuBound = ${0.25,0.75}
**.numCpus = ${1,4,12}
**.scheduler.isFCFS = ${true,false}
**.processGenerator.generationType = ${"exponential","uniform"}
**.processGenerator.durationType = ${"exponential","uniform"}


[TestIid]
extends = Default
repeat = 10
**.processGenerator.pCpuBound = 0.75
**.numCpus = 4
**.processGenerator.meanGenerationTime = ${meanGenerationTime = 50ms, 50ms}
**.processGenerator.meanProcessDuration = ${meanProcessDuration = 200ms, 150ms ! meanGenerationTime}
**.processGenerator.generationType = "exponential"
**.processGenerator.durationType = "exponential"
**.scheduler.isFCFS = true
**.turnaroundTime.result-recording-modes = all
**.numBusyCpus.result-recording-modes = all

[StatAnalysis]
extends = Default
repeat = 1
# Only these combinations
**.processGenerator.pCpuBound = ${pCpuBound = 0.1, 0.9}
# **.processGenerator.meanGenerationTime = ${meanGenerationTime = 30ms}
# **.processGenerator.meanProcessDuration = ${rho = 0.4, 0.7} * ${meanGenerationTime} * ${numCpus} / ( 0.8 * ${pCpuBound} + ( 1 - ${pCpuBound} ) * 0.2)
**.processGenerator.meanGenerationTime = ${meanProcessDuration} * ( 0.8 * ${pCpuBound} + ( 1 - ${pCpuBound} ) * 0.2) / ( ${rho = 0.4, 0.95} * ${numCpus} )
**.processGenerator.meanProcessDuration = ${meanProcessDuration = 500ms}
**.numCpus = ${numCpus = 4, 12}
# Calculate meanProcessDuration
# Only both exponential or both uniform
**.processGenerator.generationType = ${generationType = "exponential", "uniform"}
**.processGenerator.durationType = ${durationType = "exponential", "uniform" ! generationType}
# All combinations with the others
# **.scheduler.isFCFS = ${isFCFS = true, false}
**.scheduler.isFCFS = ${isFCFS = true}
# **.result-recording-modes = all
**.turnaroundTime.result-recording-modes = all

