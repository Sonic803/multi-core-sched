//
// Generated file, do not edit! Created by opp_msgtool 6.1 from msgProcess.msg.
//

#ifndef __MSGPROCESS_M_H
#define __MSGPROCESS_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class MsgProcess;
/**
 * Class generated from <tt>msgProcess.msg:19</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * message MsgProcess
 * {
 *     simtime_t InitDuration;
 *     simtime_t IODuration;
 *     simtime_t finalDuration;
 *     bool isFinalPhase; // true if the process is executing the final processing phase
 *     // int cpuID; // the ID of the CPU where the process is currently running on
 * }
 * </pre>
 */
class MsgProcess : public ::omnetpp::cMessage
{
  protected:
    omnetpp::simtime_t InitDuration = SIMTIME_ZERO;
    omnetpp::simtime_t IODuration = SIMTIME_ZERO;
    omnetpp::simtime_t finalDuration = SIMTIME_ZERO;
    bool isFinalPhase_ = false;

  private:
    void copy(const MsgProcess& other);

  protected:
    bool operator==(const MsgProcess&) = delete;

  public:
    MsgProcess(const char *name=nullptr, short kind=0);
    MsgProcess(const MsgProcess& other);
    virtual ~MsgProcess();
    MsgProcess& operator=(const MsgProcess& other);
    virtual MsgProcess *dup() const override {return new MsgProcess(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual omnetpp::simtime_t getInitDuration() const;
    virtual void setInitDuration(omnetpp::simtime_t InitDuration);

    virtual omnetpp::simtime_t getIODuration() const;
    virtual void setIODuration(omnetpp::simtime_t IODuration);

    virtual omnetpp::simtime_t getFinalDuration() const;
    virtual void setFinalDuration(omnetpp::simtime_t finalDuration);

    virtual bool isFinalPhase() const;
    virtual void setIsFinalPhase(bool isFinalPhase);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MsgProcess& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MsgProcess& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline MsgProcess *fromAnyPtr(any_ptr ptr) { return check_and_cast<MsgProcess*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MSGPROCESS_M_H

